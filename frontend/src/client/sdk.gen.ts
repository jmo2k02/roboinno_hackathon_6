// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { ReturnListApiV1HealthTestListGetData, ReturnListApiV1HealthTestListGetResponse, ReturnListApiV1HealthTestListGetError, GenerateSvgFromPromptApiV1SvgGenerateFromPromptPostData, GenerateSvgFromPromptApiV1SvgGenerateFromPromptPostError, RunRobotUsingSvgApiV1RobotRunWithSvgPostData, RunRobotUsingSvgApiV1RobotRunWithSvgPostError, RunRobotUsingImageApiV1RobotRunWithImagePostData, RunRobotUsingImageApiV1RobotRunWithImagePostError, SummarizeTextApiV1GptsummarizePostData, SummarizeTextApiV1GptsummarizePostResponse, SummarizeTextApiV1GptsummarizePostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Return List
 */
export const returnListApiV1HealthTestListGet = <ThrowOnError extends boolean = false>(options: Options<ReturnListApiV1HealthTestListGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReturnListApiV1HealthTestListGetResponse, ReturnListApiV1HealthTestListGetError, ThrowOnError>({
        url: '/api/v1/health/test-list',
        ...options
    });
};

/**
 * Generate Svg From Prompt
 * API endpoint to generate SVG from prompt.
 */
export const generateSvgFromPromptApiV1SvgGenerateFromPromptPost = <ThrowOnError extends boolean = false>(options: Options<GenerateSvgFromPromptApiV1SvgGenerateFromPromptPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, GenerateSvgFromPromptApiV1SvgGenerateFromPromptPostError, ThrowOnError>({
        url: '/api/v1/svg/generate_from_prompt',
        ...options
    });
};

/**
 * Run Robot Using Svg
 */
export const runRobotUsingSvgApiV1RobotRunWithSvgPost = <ThrowOnError extends boolean = false>(options: Options<RunRobotUsingSvgApiV1RobotRunWithSvgPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, RunRobotUsingSvgApiV1RobotRunWithSvgPostError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/v1/robot/run_with_svg',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Run Robot Using Image
 * Take an image file as input turn it into a svg, then make the robot paint it
 */
export const runRobotUsingImageApiV1RobotRunWithImagePost = <ThrowOnError extends boolean = false>(options: Options<RunRobotUsingImageApiV1RobotRunWithImagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, RunRobotUsingImageApiV1RobotRunWithImagePostError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/v1/robot/run-with-image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Summarize Text
 */
export const summarizeTextApiV1GptsummarizePost = <ThrowOnError extends boolean = false>(options: Options<SummarizeTextApiV1GptsummarizePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SummarizeTextApiV1GptsummarizePostResponse, SummarizeTextApiV1GptsummarizePostError, ThrowOnError>({
        url: '/api/v1/gptsummarize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};